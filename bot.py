import telebot
import pandas as pd
import os
import sys
from telebot import types
from telebot.async_telebot import AsyncTeleBot
import asyncio
import logging
from dotenv import load_dotenv

RELOAD_FLAG = 'reload.flag'

load_dotenv()

TOKEN = os.getenv('BOT_TOKEN')
ADMIN_ID = os.getenv('ADMIN_ID')
if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
if not ADMIN_ID:
    raise ValueError("ADMIN_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
ADMIN_ID = int(ADMIN_ID)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s %(message)s')
logger = logging.getLogger(__name__)

bot = AsyncTeleBot(TOKEN)

def load_data():
    try:
        return pd.read_csv('corrected_data.csv')
    except FileNotFoundError:
        return pd.DataFrame()

def get_available_options(df, column):
    return sorted(df[column].unique().tolist())

def create_spec_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row('–†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞ üìè', '–ì–µ—Ä—Ü–æ–≤–∫–∞ üîÑ', '–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ üñ•Ô∏è')
    keyboard.row('–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä üíª', '–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ üéÆ', '–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å üíæ')
    keyboard.row('–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å üíø', '–ù–∞–π—Ç–∏ –Ω–æ—É—Ç–±—É–∫–∏ üîç', '–í –º–µ–Ω—é ‚Ü©Ô∏è')
    keyboard.row('–°–±—Ä–æ—Å–∏—Ç—å üîÅ')
    return keyboard

def create_main_keyboard(is_admin=False):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row('–ù–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Ä üöÄ', '–ü–æ–º–æ—â—å ‚ÑπÔ∏è')
    if is_admin:
        keyboard.row('–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç üßπ')
        keyboard.row('–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞ üîÑ')
    return keyboard

def get_spec_mapping():
    return {
        '–†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞': 'Screen Size',
        '–ì–µ—Ä—Ü–æ–≤–∫–∞': 'Refresh Rate',
        '–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ': 'Resolution',
        '–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä': 'Processor',
        '–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞': 'Graphics Card',
        '–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å': 'RAM',
        '–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å': 'Storage'
    }

user_preferences = {}
user_ids = set()
filter_stats = {}

def create_options_keyboard(options, spec):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = []
    for option in options:
        callback_data = f"{spec}:{option}"
        buttons.append(types.InlineKeyboardButton(text=str(option), callback_data=callback_data))
    keyboard.add(*buttons)
    return keyboard

def get_filtered_options(df, user_prefs):
    filtered_df = df.copy()
    for spec, value in user_prefs.items():
        if spec in df.columns:
            filtered_df = filtered_df[filtered_df[spec].astype(str).str.contains(str(value), case=False)]
    return filtered_df

def get_user_log_name(user):
    uname = user.username if hasattr(user, 'username') and user.username else None
    fname = user.first_name or ''
    lname = user.last_name or ''
    full_name = (fname + ' ' + lname).strip()
    if uname:
        # –ï—Å–ª–∏ username –∏ –∏–º—è —Å–æ–≤–ø–∞–¥–∞—é—Ç, –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º
        if uname.lower() == full_name.lower():
            return f"@{uname}"
        else:
            return f"@{uname} ({full_name})"
    else:
        return full_name

@bot.message_handler(commands=['start'])
async def start(message):
    user_preferences[message.chat.id] = {}
    user_ids.add(message.chat.id)
    user_log_name = get_user_log_name(message.from_user)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_log_name} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É. –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_ids)}")
    is_admin = (message.from_user.id == ADMIN_ID)
    await bot.send_message(message.chat.id, 
                     "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ–¥–±–æ—Ä–∞ –Ω–æ—É—Ç–±—É–∫–æ–≤! üñ•Ô∏è\n"
                     "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—ã–π –Ω–æ—É—Ç–±—É–∫ –ø–æ –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º.\n"
                     "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
                     reply_markup=create_main_keyboard(is_admin))

@bot.message_handler(commands=['help'])
async def help(message):
    help_text = (
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ üöÄ\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚ÑπÔ∏è\n"
        "/reload - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞ üîÑ\n"
        "/reset - –°–±—Ä–æ—Å–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ üîÅ\n\n"
        "–î–ª—è –ø–æ–¥–±–æ—Ä–∞ –Ω–æ—É—Ç–±—É–∫–∞ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Ä üöÄ' –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º."
    )
    await bot.send_message(message.chat.id, help_text)

@bot.message_handler(commands=['reload'])
async def reload(message):
    if message.from_user.id != ADMIN_ID:
        await bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞.")
        return
    await bot.send_message(message.chat.id, "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞...")
    with open(RELOAD_FLAG, 'w') as f:
        f.write(str(message.chat.id))
    python = sys.executable
    os.execl(python, python, *sys.argv)

@bot.message_handler(commands=['reset'])
async def reset(message):
    user_preferences[message.chat.id] = {}
    await bot.send_message(message.chat.id, "üîÑ –í—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã!", 
                     reply_markup=create_main_keyboard())

@bot.message_handler(func=lambda message: message.text == '–°–±—Ä–æ—Å–∏—Ç—å üîÅ')
async def reset_button(message):
    user_preferences[message.chat.id] = {}
    await bot.send_message(message.chat.id, "üîÑ –í—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã!")
    await bot.send_message(message.chat.id, 
                     "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å:",
                     reply_markup=create_spec_keyboard())

@bot.message_handler(func=lambda message: message.text == '–ù–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Ä üöÄ')
async def start_selection(message):
    await bot.send_message(message.chat.id, 
                     "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å:",
                     reply_markup=create_spec_keyboard())

@bot.message_handler(func=lambda message: message.text == '–í –º–µ–Ω—é ‚Ü©Ô∏è')
async def back_to_main(message):
    is_admin = (message.from_user.id == ADMIN_ID)
    await bot.send_message(message.chat.id, 
                     "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                     reply_markup=create_main_keyboard(is_admin))

@bot.message_handler(func=lambda message: message.text in ['–†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞ üìè', '–ì–µ—Ä—Ü–æ–≤–∫–∞ üîÑ', '–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ üñ•Ô∏è', 
                                                         '–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä üíª', '–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ üéÆ', '–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å üíæ', '–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å üíø'])
async def handle_spec_selection(message):
    display_spec = ' '.join(message.text.split()[:-1]) 
    spec_mapping = get_spec_mapping()
    spec = spec_mapping[display_spec]
    df = load_data()
    if df.empty:
        await bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –Ω–æ—É—Ç–±—É–∫–∞—Ö!")
        return
    filtered_df = get_filtered_options(df, user_preferences.get(message.chat.id, {}))
    available_options = get_available_options(filtered_df, spec)
    if not available_options:
        await bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π –¥–ª—è —ç—Ç–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å —Ç–µ–∫—É—â–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏!")
        return
    options_text = f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è '{display_spec}':\n" + "\n".join([f"‚Ä¢ {option}" for option in available_options])
    await bot.send_message(message.chat.id, 
                     f"–í—ã–±–µ—Ä–∏—Ç–µ {display_spec}:\n\n{options_text}",
                     reply_markup=create_options_keyboard(available_options, spec))

@bot.callback_query_handler(func=lambda call: True)
async def handle_callback(call):
    spec, value = call.data.split(':')
    if call.message.chat.id not in user_preferences:
        user_preferences[call.message.chat.id] = {}
    user_preferences[call.message.chat.id][spec] = value
    column_rus_emoji = {
        'Screen Size': 'üìè –†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞',
        'Refresh Rate': 'üîÑ –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
        'Resolution': 'üñ•Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞',
        'Processor': 'üíª –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä',
        'Graphics Card': 'üéÆ –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞',
        'RAM': 'üíæ –û–±—ä–µ–º –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏',
        'Storage': 'üíø –û–±—ä–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏',
        'Price': 'üí∞ –¶–µ–Ω–∞',
        'Model': '–ú–æ–¥–µ–ª—å'
    }
    rus_emoji = column_rus_emoji.get(spec, spec)
    await bot.answer_callback_query(call.id, f"‚úÖ {rus_emoji} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {value}")
    selected_specs = [f"‚Ä¢ {column_rus_emoji.get(k, k)}: {v}" for k, v in user_preferences[call.message.chat.id].items()]
    await bot.edit_message_text(
        f"‚úÖ {rus_emoji} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {value}\n\n–¢–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n" + 
        "\n".join(selected_specs),
        call.message.chat.id,
        call.message.message_id
    )
    filter_stats[spec] = filter_stats.get(spec, 0) + 1

@bot.message_handler(func=lambda message: message.text == '–ù–∞–π—Ç–∏ –Ω–æ—É—Ç–±—É–∫–∏ üîç')
async def find_laptops(message):
    try:
        if message.chat.id not in user_preferences or not user_preferences[message.chat.id]:
            await bot.send_message(message.chat.id, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É!")
            return
        df = load_data()
        if df.empty:
            await bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –Ω–æ—É—Ç–±—É–∫–∞—Ö!")
            return
        filtered_df = df.copy()
        for spec, value in user_preferences[message.chat.id].items():
            if spec in df.columns:
                filtered_df = filtered_df[filtered_df[spec].astype(str).str.contains(str(value), case=False)]
        if filtered_df.empty:
            await bot.send_message(message.chat.id, "üîç –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ—É—Ç–±—É–∫–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º!")
        else:
            await bot.send_message(message.chat.id, f"üîé –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(filtered_df)}")
            column_rus_emoji = {
                'Model': '–ú–æ–¥–µ–ª—å',
                'Screen Size': 'üìè –†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞',
                'Refresh Rate': 'üîÑ –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
                'Resolution': 'üñ•Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞',
                'Processor': 'üíª –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä',
                'Graphics Card': 'üéÆ –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞',
                'RAM': 'üíæ –û–±—ä–µ–º –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏',
                'Storage': 'üíø –û–±—ä–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏',
                'Price': 'üí∞ –¶–µ–Ω–∞'
            }
            for _, laptop in filtered_df.iterrows():
                result = "üíª –ù–∞–π–¥–µ–Ω –Ω–æ—É—Ç–±—É–∫:\n"
                for column in df.columns:
                    if column not in ['Images', 'Link']:
                        value = laptop[column]
                        rus_emoji = column_rus_emoji.get(column, column)
                        if column == 'Refresh Rate':
                            result += f"{rus_emoji}: {value} –ì—Ü\n"
                        elif column == 'Price':
                            result += f"{rus_emoji}: {value}\n"
                        else:
                            result += f"{rus_emoji}: {value}\n"
                if 'Link' in df.columns and pd.notna(laptop['Link']) and str(laptop['Link']).strip():
                    result += f"üîó [–°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–æ—É—Ç–±—É–∫]({laptop['Link']})\n"
                if 'Images' in df.columns and pd.notna(laptop['Images']):
                    images = [url.strip() for url in str(laptop['Images']).split(',') if url.strip()]
                    if len(images) == 1:
                        await bot.send_photo(message.chat.id, images[0], caption=result, parse_mode='Markdown')
                    elif len(images) > 1:
                        media = [types.InputMediaPhoto(url) for url in images]
                        media[0].caption = result
                        media[0].parse_mode = 'Markdown'
                        await bot.send_media_group(message.chat.id, media)
                    else:
                        await bot.send_message(message.chat.id, result, parse_mode='Markdown')
                else:
                    await bot.send_message(message.chat.id, result, parse_mode='Markdown')
    except Exception as e:
        user_log_name = get_user_log_name(message.from_user)
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–æ—É—Ç–±—É–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_log_name} (id={message.chat.id})")
        await bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–æ—É—Ç–±—É–∫–æ–≤!")

@bot.message_handler(func=lambda message: message.text == '–ü–æ–º–æ—â—å ‚ÑπÔ∏è')
async def help_button(message):
    await help(message)

@bot.message_handler(func=lambda message: message.text == '–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç üßπ')
async def clear_chat(message):
    if message.from_user.id != ADMIN_ID:
        await bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        return
    cleaning_msg = await bot.send_message(message.chat.id, "üßπ –û—á–∏—â–∞—é —á–∞—Ç...")
    try:
        await bot.delete_message(message.chat.id, cleaning_msg.message_id)
    except Exception:
        pass
    try:
        for msg_id in range(message.message_id, message.message_id-100, -1):
            try:
                await bot.delete_message(message.chat.id, msg_id)
            except Exception:
                pass
    except Exception:
        pass

@bot.message_handler(func=lambda message: message.text == '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞ üîÑ')
async def reload_button(message):
    if message.from_user.id != ADMIN_ID:
        await bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞.")
        return
    await bot.send_message(message.chat.id, "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞...")
    with open(RELOAD_FLAG, 'w') as f:
        f.write(str(message.chat.id))
    python = sys.executable
    os.execl(python, python, *sys.argv)

if __name__ == '__main__':
    async def main():
        if os.path.exists(RELOAD_FLAG):
            with open(RELOAD_FLAG, 'r') as f:
                chat_id = int(f.read().strip())
            await bot.send_message(chat_id, "‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω!")
            os.remove(RELOAD_FLAG)
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        await bot.polling(none_stop=True)
    asyncio.run(main())
